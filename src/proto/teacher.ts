// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/proto/teacher.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "teacher";

export interface CreateTeacherDto {
  firstName: string;
  lastName: string;
  gender: string;
  dateOfBirth: Date | undefined;
  specialize: string;
  classId?: string | undefined;
}

export interface UpdateTeacherDto {
  id: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  gender?: string | undefined;
  dateOfBirth?: Date | undefined;
  specialize?: string | undefined;
  classId?: string | undefined;
}

export interface RemoveTeacherDto {
  id: string;
}

export interface FindTeacherByIdDto {
  id: string;
}

export interface FindAllTeacherDto {
}

export interface SearchByQueryDto {
  firstName?: string | undefined;
  lastName?: string | undefined;
  gender?: string | undefined;
  specialize?: string | undefined;
}

export interface Teachers {
  teacher: Teacher[];
}

export interface Teacher {
  id: string;
  firstName: string;
  lastName: string;
  gender: string;
  dateOfBirth: Date | undefined;
  specialize: string;
  classId: string;
  createdAt: Date | undefined;
  deletedAt?: Date | undefined;
  updatedAt: Date | undefined;
}

export const TEACHER_PACKAGE_NAME = "teacher";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface TeacherServiceClient {
  findById(request: FindTeacherByIdDto): Observable<Teacher>;

  findAll(request: FindAllTeacherDto): Observable<Teachers>;

  searchByQuery(request: SearchByQueryDto): Observable<Teachers>;

  create(request: CreateTeacherDto): Observable<Teacher>;

  update(request: UpdateTeacherDto): Observable<Teacher>;

  remove(request: RemoveTeacherDto): Observable<Teacher>;
}

export interface TeacherServiceController {
  findById(request: FindTeacherByIdDto): Promise<Teacher> | Observable<Teacher> | Teacher;

  findAll(request: FindAllTeacherDto): Promise<Teachers> | Observable<Teachers> | Teachers;

  searchByQuery(request: SearchByQueryDto): Promise<Teachers> | Observable<Teachers> | Teachers;

  create(request: CreateTeacherDto): Promise<Teacher> | Observable<Teacher> | Teacher;

  update(request: UpdateTeacherDto): Promise<Teacher> | Observable<Teacher> | Teacher;

  remove(request: RemoveTeacherDto): Promise<Teacher> | Observable<Teacher> | Teacher;
}

export function TeacherServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findById", "findAll", "searchByQuery", "create", "update", "remove"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TeacherService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TeacherService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TEACHER_SERVICE_NAME = "TeacherService";
